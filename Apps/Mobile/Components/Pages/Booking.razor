@page "/booking"
@using Mobile.Components.Layout
@inject IPreferences Preferences
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.Globalization

<div class="booking-container">
    <h1>Welcome, @m_currentUser!</h1>

    <div class="booking-form">
        <div class="form-group">
            <label>Select a date:</label>
            <div class="calendar">
                <div class="calendar-header">
                    <button class="nav-button" @onclick="() => ChangeMonth(-1)">&lt;</button>
                    <span class="month-title">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m_currentDate.Month) @m_currentDate.Year</span>
                    <button class="nav-button" @onclick="() => ChangeMonth(1)">&gt;</button>
                </div>
                <div class="weekdays">
                    @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                    {
                        <div class="weekday">@day.ToString().Substring(0, 3)</div>
                    }
                </div>
                <div class="days">
                    @foreach (var day in m_daysInMonth)
                    {
                        <div class="day @(day.Date == m_selectedDate?.Date ? "selected" : "") 
                                      @(day.Month != m_currentDate.Month ? "other-month" : "") 
                                      @(day < DateTime.Today ? "past-day" : "")"
                        @onclick="() => SelectDate(day)">
                            @day.Day
                        </div>
                    }
                </div>
            </div>
        </div>

        @if (m_selectedDate.HasValue)
        {
            <div class="form-group">
                <label>Select time range (max 2 hours):</label>
                <div class="time-range-picker">
                    <select @bind="StartHour" class="time-select" >
                        @for (int hour = 8; hour <= 20; hour++)
                        {
                            <option value="@($"{hour}:00")">@hour:00</option>
                            <option value="@($"{hour}:30")">@hour:30</option>
                        }
                    </select>
                    <span>to</span>
                    <select @bind="EndHour" class="time-select" >
                        @for (int hour = 8; hour <= 20; hour++)
                        {
                            <option value="@($"{hour}:00")">@hour:00</option>
                            <option value="@($"{hour}:30")">@hour:30</option>
                        }
                    </select>
                </div>
                @if (!string.IsNullOrEmpty(m_errorPlaceholder))
                {
                    <div class="error-message">@m_errorPlaceholder</div>
                }
            </div>

            <div class="form-group">
                <label>Select room:</label>
                <select @bind="SelectedRoom" class="room-select">
                    <option value="1">Large Room</option>
                    <option value="2">Small Room</option>
                </select>
            </div>

            <button class="submit-button" @onclick="SubmitBooking" disabled="@(!IsValidBooking())">Book Appointment</button>
        }
    </div>
</div>

@code {
    private string m_currentUser = string.Empty;
    private DateTime m_currentDate = DateTime.Today;
    private DateTime? m_selectedDate = null;
    private List<DateTime> m_daysInMonth = new();
    private string m_startHour = string.Empty;
    private string m_endHour =string.Empty;
    private string m_errorPlaceholder = string.Empty;

    private string StartHour
    {
        get => m_startHour;
        set
        {
            m_startHour = value;
            ValidateTimeRange();
        }
    }

    private string EndHour
    {
        get => m_endHour;
        set
        {
            m_endHour = value;
            ValidateTimeRange();
        }
    }

    private int SelectedRoom { get; set; } = 1;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ValidateTimeRange();
    }

    protected override void OnInitialized()
    {
        m_currentUser = Preferences.Get("Username", string.Empty);
        if (string.IsNullOrWhiteSpace(m_currentUser))
            NavigationManager.NavigateTo("auth");

        GenerateCalendarDays();
    }

    private void GenerateCalendarDays()
    {
        m_daysInMonth = new List<DateTime>();
        var firstDayOfMonth = new DateTime(m_currentDate.Year, m_currentDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        int daysFromPreviousMonth = ((int)firstDayOfMonth.DayOfWeek - (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek + 7) % 7;
        for (int i = daysFromPreviousMonth - 1; i >= 0; i--)
        {
            m_daysInMonth.Add(firstDayOfMonth.AddDays(-i - 1));
        }

        for (int i = 0; i < lastDayOfMonth.Day; i++)
        {
            m_daysInMonth.Add(firstDayOfMonth.AddDays(i));
        }

        int daysFromNextMonth = 6 - (int)lastDayOfMonth.DayOfWeek;
        for (int i = 1; i <= daysFromNextMonth; i++)
        {
            m_daysInMonth.Add(lastDayOfMonth.AddDays(i));
        }
    }

    private void ChangeMonth(int months)
    {
        m_currentDate = m_currentDate.AddMonths(months);
        GenerateCalendarDays();
    }

    private void SelectDate(DateTime date)
    {
        if (date >= DateTime.Today)
        {
            m_selectedDate = date;
            m_errorPlaceholder = string.Empty;
        }
    }

    private void ValidateTimeRange()
    {
        if(!DateTime.TryParse(m_startHour,out DateTime start) ||
        !DateTime.TryParse(m_endHour,out DateTime end)) return;

        if (end <= start)
        {
            m_errorPlaceholder = "End time must be after start time";
            return;
        }

        if (end - start > TimeSpan.FromHours(2))
        {
            m_errorPlaceholder = "Maximum booking duration is 2 hours";
            return;
        }

        m_errorPlaceholder = string.Empty;
    }

    private bool IsValidBooking()
    {
        return m_selectedDate.HasValue
               && string.IsNullOrEmpty(m_errorPlaceholder)
               && DateTime.TryParse(StartHour, out _)
               && DateTime.TryParse(EndHour, out _);
    }

    private async Task SubmitBooking()
    {
        if (!IsValidBooking() || !m_selectedDate.HasValue) return;

        try
        {
            DateTime start = m_selectedDate.Value.Date.Add(TimeSpan.Parse(m_startHour));
            DateTime end = m_selectedDate.Value.Date.Add(TimeSpan.Parse(m_endHour));

            string checkUrl = $"/Api/Appointments?start={start:g}&end={end:g}&room={SelectedRoom}";
            HttpResponseMessage response =await  Http.GetAsync(checkUrl);
            if (response.IsSuccessStatusCode)
            {
                List<AppointmentDto>? appointments = await response.Content.ReadFromJsonAsync<List<AppointmentDto>>();
                if (appointments?.Count > 0)
                {
                    m_errorPlaceholder = "Selected time range is already booked";
                    return;
                }
            }

            AppointmentDto appointment = new AppointmentDto
                {
                    Host = m_currentUser,
                    Start = start,
                    End = end,
                    Room = SelectedRoom
                };

            response = await Http.PostAsJsonAsync("/Api/Appointment", appointment);
            NavigationManager.NavigateTo("my-bookings");
        }
        catch (Exception e)
        {
            m_errorPlaceholder = $"Error: {e.Message}";
        }
    }

    internal sealed class AppointmentDto
    {
        public string? Host { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public int Room { get; set; }
    }
}
